import os

import speech_recognition as sr

from pydub import AudioSegment
from pydub.playback import play
from gtts import gTTS as tts


#even methods for recognizing speech from an audio source using various APIs. These are:

recognize_bing(): Microsoft Bing Speech
recognize_google(): Google Web Speech API
recognize_google_cloud(): Google Cloud Speech - requires installation of the google-cloud-speech package
recognize_houndify(): Houndify by SoundHound
recognize_ibm(): IBM Speech to Text
recognize_sphinx(): CMU Sphinx - requires installing PocketSphinx
recognize_wit(): Wit.ai



r.recognize_google()

#Supported File Types
Currently, SpeechRecognition supports the following file formats:

WAV: must be in PCM/LPCM format
AIFF
AIFF-C
FLAC: must be native FLAC format; OGG-FLAC is not supported


filename = sr.AudioFile('filename.wav')
with filename as source:
...    audio = r.record(source)

type(audio)
<class 'speech_recognition.AudioData'>
r.recognize_google(audio)



# the following captures any speech in the first four seconds of the file:

with filename as source:
...    audio = r.record(source, duration=4)
...
r.recognize_google(audio)

###The record() method, when used inside a with block, always moves ahead in the file stream. This means that if you record once for four seconds and then record again for four seconds, the second time returns the four seconds of audio after the first four seconds.
with filename as source:
...    audio1 = r.record(source, duration=4)
       audio2 = r.record(source, duration=4)
...
r.recognize_google(audio1)
r.recognize_google(audio2)


To capture only the second phrase in the file, you could start with an offset of four seconds and record for, say, three seconds.

>>> with harvard as source:
...     audio = r.record(source, offset=4, duration=3)
...
>>> r.recognize_google(audio)





What happens when you try to transcribe this file?

>>> jackhammer = sr.AudioFile('jackhammer.wav')
>>> with jackhammer as source:
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
'the snail smell of old gear vendor



Way off!

So how do you deal with this? One thing you can try is using the adjust_for_ambient_noise() method of the Recognizer class.

>>> with jackhammer as source:
...     r.adjust_for_ambient_noise(source)
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
'still smell of old beer vendors'



You can adjust the time-frame that adjust_for_ambient_noise() uses for analysis with the duration keyword argument. This argument takes a numerical value in seconds and is set to 1 by default. Try lowering this value to 0.5.

>>> with jackhammer as source:
...     r.adjust_for_ambient_noise(source, duration=0.5)
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
'the snail smell like old Beer Mongers'



If you find yourself running up against these issues frequently, you may have to resort to some pre-processing of the audio. This can be done with audio editing software or a Python package (such as SciPy) that can apply filters to the files. 




You can do this by setting the show_all keyword argument of the recognize_google() method to True.

>>> r.recognize_google(audio, show_all=True)



